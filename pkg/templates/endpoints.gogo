// Code generated by go generate; DO NOT EDIT.
package {{ .PackageName }}

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/google/uuid"
)

{{- range $pathName, $pathDefinition := .Paths }}

{{- $operations := $pathDefinition.Operations }}
{{- range $method, $op := $operations }}
// APIEndpoint{{ title .OperationID }} describes the {{ $op.OperationID }} endpoint.
type APIEndpoint{{ title $op.OperationID }} struct {
	handler     APIOperation{{title $op.OperationID}}
	middlewares Middlewares
}

{{- if $op.RequestBody }}
  {{- $mediaTypeContent :=  $op.RequestBody.Value.Content.Get "application/json"}}
  {{- if $mediaTypeContent }}
    {{- $rbName := title $op.OperationID }}
    {{- schemaType $rbName "RequestBody" $mediaTypeContent.Schema }}
  {{- else }}
  // Unsupported media type for request body, only application/json is supported
  {{- end }}
{{- end }}
{{- if $op.Parameters }}
// Parameters{{ title $op.OperationID }} describes the parameters for the {{.OperationID}} endpoint.
type Parameters{{ title $op.OperationID }} struct {
	{{- range $op.Parameters }}
	{{ publicGoName .Value.Name}} {{ goTypeFrom .Value.Schema }}
	{{- end }}
}
{{- end }}

// Boot{{ title $op.OperationID }} boots the {{ $op.OperationID }} endpoint.
func (oas *OpenAPIServer) Boot{{ title $op.OperationID }}() {
	m, h := oas.Server.Handle{{ title $op.OperationID }}()
	oas.{{ $op.OperationID }} = APIEndpoint{{ title $op.OperationID }}{
		handler:     h,
		middlewares: m,
	}
}

// APIOperation{{ title $op.OperationID }} is an alias for the func signature.
{{- if and $op.RequestBody $op.Parameters }}
type APIOperation{{ title $op.OperationID }} func(w http.ResponseWriter, r *http.Request, p Parameters{{ title $op.OperationID }}, rb RequestBody{{ title $op.OperationID }})
{{- else if $op.RequestBody }}
type APIOperation{{ title $op.OperationID }} func(w http.ResponseWriter, r *http.Request, rb RequestBody{{ title $op.OperationID }})
{{- else if $op.Parameters }}
type APIOperation{{ title $op.OperationID }} func(w http.ResponseWriter, r *http.Request, p Parameters{{ title $op.OperationID }})
{{- else }}
type APIOperation{{ title $op.OperationID }} func(w http.ResponseWriter, r *http.Request)
{{- end }}

func (e APIEndpoint{{ title $op.OperationID }}) execute(w http.ResponseWriter, r *http.Request) {
	{{- if $op.RequestBody }}
	// Request Body
	var rb RequestBody{{ title $op.OperationID }}
	err := json.NewDecoder(r.Body).Decode(&rb)
	if err != nil {
		http.Error(w, "Could not decode JSON", http.StatusBadRequest)
		return
	}
	{{- end }}

	{{- if $op.Parameters }}
	p := Parameters{{ title $op.OperationID }}{}
	{{- end }}
	{{- $queryParameters := parametersByType $op.Parameters "query" }}
	{{- if $queryParameters }}
	// Query parameters
	var rawQueryValue string
	{{- range $queryParameters }}
	// Handle {{.Value.Name}} param
	rawQueryValue = r.URL.Query().Get("{{ .Value.Name }}")
	{{- extractParameter "Query" "rawQueryValue" . }}
	{{- end }}
	{{- end }}

	{{- $pathParameters := parametersByType .Parameters "path" }}
	{{- if $pathParameters }}
	// Path parameters
	{{- range $pathParameters }}
	oasPathParts := strings.Split("/pets/{{curled .Value.Name}}", "/")
	pathParts := strings.Split(r.URL.Path, "/")
	for k, v := range pathParts {
		if oasPathParts[k] == "{{curled .Value.Name}}" {
			{{- $goType := goTypeFrom .Value.Schema }}
			{{- if eq $goType "int" }}
			rawValue, err := strconv.Atoi(v)
			if err != nil {
				http.Error(w, fmt.Sprintf("Invalid user id %q", v), http.StatusBadRequest)
				return
			}
			{{- else if eq $goType "float64" }}
			rawValue, err := strconv.ParseFloat(v, 64)
			if err != nil {
				http.Error(w, fmt.Sprintf("Invalid user id %q", v), http.StatusBadRequest)
				return
			}
			{{- else }}
			panic("Not implemented")
			{{- end }}
			p.{{ title .Value.Name }} = rawValue
		}
	}
	{{- end }}
	{{- end }}

	{{- $headerParameters := parametersByType .Parameters "header" }}
	{{- if $headerParameters }}
	// Header Parameters
	var rawHeaderValue string
	{{- range $headerParameters }}
	rawHeaderValue = r.Header.Get("{{.Value.Name}}")
	{{- extractParameter "Header" "rawHeaderValue" . }}
	{{- end }}
	{{- end }}

	// Call handler
	{{- if and $op.RequestBody $op.Parameters }}
	e.handler(w, r, p, rb)
	{{- else if $op.RequestBody }}
	e.handler(w, r, rb)
	{{- else if $op.Parameters }}
	e.handler(w, r, p)
	{{- else }}
	e.handler(w, r)
	{{- end }}
}
{{- end }}
{{- end }}
