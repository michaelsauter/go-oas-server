// Code generated by go generate; DO NOT EDIT.
package parameters

import (
	"net/http"
	"path"
	"strings"
)

func (oas *OpenAPIServer) routeLevel0Root(w http.ResponseWriter, r *http.Request, p string) {
	var head string
	head, p = shiftPath(p)

	// If head is empty, try one of the methods
	if head == "" {
		http.Error(w, "Not Found", http.StatusNotFound)
		return
	}
	// Match against segments
	if head == "cats" {
		oas.routeLevel1Cats(w, r, p)
		return
	}
	if head == "pets" {
		oas.routeLevel1Pets(w, r, p)
		return
	}
	// Not found
	http.Error(w, "Not Found", http.StatusNotFound)
}
func (oas *OpenAPIServer) routeLevel1Cats(w http.ResponseWriter, r *http.Request, p string) {
	var head string
	head, p = shiftPath(p)

	// If head is empty, try one of the methods
	if head == "" {
		if r.Method == "GET" {
			oas.serve(oas.catIndex.execute, oas.catIndex.middlewares, w, r)
			return
		}
		http.Error(w, "Not Found", http.StatusNotFound)
		return
	}
	// Not found
	http.Error(w, "Not Found", http.StatusNotFound)
}
func (oas *OpenAPIServer) routeLevel1Pets(w http.ResponseWriter, r *http.Request, p string) {
	var head string
	head, p = shiftPath(p)

	// If head is empty, try one of the methods
	if head == "" {
		if r.Method == "GET" {
			oas.serve(oas.petIndex.execute, oas.petIndex.middlewares, w, r)
			return
		}
		http.Error(w, "Not Found", http.StatusNotFound)
		return
	}
	// Match against segments
	// "Match" against path param
	oas.routeLevel2Id(w, r, p)
	return
}
func (oas *OpenAPIServer) routeLevel2Id(w http.ResponseWriter, r *http.Request, p string) {
	var head string
	head, p = shiftPath(p)

	// If head is empty, try one of the methods
	if head == "" {
		if r.Method == "GET" {
			oas.serve(oas.petShow.execute, oas.petShow.middlewares, w, r)
			return
		}
		http.Error(w, "Not Found", http.StatusNotFound)
		return
	}
	// Not found
	http.Error(w, "Not Found", http.StatusNotFound)
}

// shiftPath splits off the first component of p, which will be cleaned of
// relative components before processing. head will never contain a slash and
// tail will always be a rooted path without trailing slash.
// Use e.g. like this: head, req.URL.Path = ShiftPath(req.URL.Path)
// Taken from https://blog.merovius.de/2017/06/18/how-not-to-use-an-http-router.html.
func shiftPath(p string) (head, tail string) {
	p = path.Clean("/" + p)
	i := strings.Index(p[1:], "/") + 1
	if i <= 0 {
		return p[1:], "/"
	}
	return p[1:i], p[i:]
}
